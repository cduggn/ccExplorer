package aws_presets

func PresetList() []PresetParams {
	p := []PresetParams{
		{
			Alias:             "Costs grouped by LINKED_ACCOUNT",
			Dimension:         []string{"SERVICE", "LINKED_ACCOUNT"},
			Tag:               "",
			Filter:            map[string]string{},
			FilterByTag:       false,
			FilterByDimension: false,
			ExcludeDiscounts:  true,
			Description: []string{"(Dimension=SERVICE",
				"Dimension=LINKED_ACCOUNT)"},
			CommandSyntax: "[ ccexplorer get aws -g DIMENSION=SERVICE," +
				"DIMENSION=LINKED_ACCOUNT -l ]",
			Granularity: "MONTHLY",
			PrintFormat: "stdout",
			Metric:      []string{"UnblendedCost"},
		},
		{
			Alias:             "Costs grouped by USAGE_TYPE",
			Dimension:         []string{"SERVICE", "USAGE_TYPE"},
			Tag:               "",
			Filter:            map[string]string{},
			FilterByTag:       false,
			FilterByDimension: false,
			ExcludeDiscounts:  true,
			Description: []string{"(Dimension=SERVICE",
				"Dimension=USAGE_TYPE)"},
			CommandSyntax: "[ ccexplorer get aws -g DIMENSION=SERVICE," +
				"DIMENSION=USAGE_TYPE -l ]",
			Granularity: "MONTHLY",
			PrintFormat: "stdout",
			Metric:      []string{"UnblendedCost"},
		},
		{
			Alias:             "Costs grouped by OPERATION",
			Dimension:         []string{"SERVICE", "OPERATION"},
			Tag:               "",
			Filter:            map[string]string{},
			FilterByTag:       false,
			FilterByDimension: false,
			ExcludeDiscounts:  true,
			Description: []string{"(Dimension=SERVICE",
				"Dimension=OPERATION)"},
			CommandSyntax: "[ ccexplorer get aws -g DIMENSION=SERVICE," +
				"DIMENSION=OPERATION -l ]",
			Granularity: "MONTHLY",
			PrintFormat: "stdout",
			Metric:      []string{"UnblendedCost"},
		},
		{
			Alias:             "S3 costs grouped by OPERATION",
			Dimension:         []string{"SERVICE", "OPERATION"},
			Tag:               "",
			Filter:            map[string]string{"SERVICE": "Amazon Simple Storage Service"},
			FilterByTag:       false,
			FilterByDimension: true,
			ExcludeDiscounts:  true,
			Description: []string{"(Dimension=SERVICE",
				"Dimension=OPERATION)"},
			CommandSyntax: "[ ccexplorer get aws -g DIMENSION=SERVICE," +
				"DIMENSION=OPERATION -f SERVICE=\"Amazon Simple Storage" +
				" Service\"]",
			Granularity: "MONTHLY",
			PrintFormat: "stdout",
			Metric:      []string{"UnblendedCost"},
		},
		{
			Alias:             "S3 costs grouped by USAGE_TYPE",
			Dimension:         []string{"SERVICE", "USAGE_TYPE"},
			Tag:               "Name",
			Filter:            map[string]string{"SERVICE": "Amazon Simple Storage Service"},
			FilterByTag:       false,
			FilterByDimension: true,
			ExcludeDiscounts:  true,
			Description: []string{"(Dimension=SERVICE",
				"Dimension=USAGE_TYPE)"},
			CommandSyntax: "[ ccexplorer get aws -g DIMENSION=SERVICE," +
				"DIMENSION=USAGE_TYPE -f SERVICE=\"Amazon Simple Storage" +
				" Service\" -l ]",
			Granularity: "MONTHLY",
			PrintFormat: "stdout",
			Metric:      []string{"UnblendedCost"},
		},
		{
			Alias:             "S3 costs grouped by LINKED_ACCOUNT",
			Dimension:         []string{"SERVICE", "LINKED_ACCOUNT"},
			Tag:               "Name",
			Filter:            map[string]string{"SERVICE": "Amazon Simple Storage Service"},
			FilterByTag:       false,
			FilterByDimension: true,
			ExcludeDiscounts:  true,
			Description: []string{"(Dimension=SERVICE",
				"Dimension=LINKED_ACCOUNT)"},
			CommandSyntax: "[ ccexplorer get aws -g DIMENSION=SERVICE," +
				"DIMENSION=LINKED_ACCOUNT -f SERVICE=\"Amazon Simple Storage" +
				" Service\" -l ]",
			Granularity: "MONTHLY",
			PrintFormat: "stdout",
			Metric:      []string{"UnblendedCost"},
		},
		{
			Alias:             "DynamoDB costs grouped by OPERATION",
			Dimension:         []string{"SERVICE", "OPERATION"},
			Tag:               "Name",
			Filter:            map[string]string{"SERVICE": "Amazon DynamoDB"},
			FilterByTag:       false,
			FilterByDimension: true,
			ExcludeDiscounts:  true,
			Description: []string{"(Dimension=SERVICE",
				"Dimension=OPERATION)"},
			CommandSyntax: "[ ccexplorer get aws -g DIMENSION=SERVICE," +
				"DIMENSION=OPERATION -f SERVICE=\"Amazon DynamoDB\" -l ]",
			Granularity: "MONTHLY",
			PrintFormat: "stdout",
			Metric:      []string{"UnblendedCost"},
		},
		{
			Alias:             "DynamoDB costs grouped by USAGE_TYPE",
			Dimension:         []string{"SERVICE", "USAGE_TYPE"},
			Tag:               "Name",
			Filter:            map[string]string{"SERVICE": "Amazon DynamoDB"},
			FilterByTag:       false,
			FilterByDimension: true,
			ExcludeDiscounts:  true,
			Description: []string{"(Dimension=SERVICE",
				"Dimension=USAGE_TYPE)"},
			CommandSyntax: "[ ccexplorer get aws -g DIMENSION=SERVICE," +
				"DIMENSION=USAGE_TYPE -f SERVICE=\"Amazon DynamoDB\" -l ]",
			Granularity: "MONTHLY",
			PrintFormat: "stdout",
			Metric:      []string{"UnblendedCost"},
		},
		{
			Alias:             "DynamoDB costs grouped by LINKED_ACCOUNT",
			Dimension:         []string{"SERVICE", "LINKED_ACCOUNT"},
			Tag:               "Name",
			Filter:            map[string]string{"SERVICE": "Amazon DynamoDB"},
			FilterByTag:       false,
			FilterByDimension: true,
			ExcludeDiscounts:  true,
			Description: []string{"(Dimension=SERVICE",
				"Dimension=LINKED_ACCOUNT)"},
			CommandSyntax: "[ ccexplorer get aws -g DIMENSION=SERVICE," +
				"DIMENSION=LINKED_ACCOUNT -f SERVICE=\"Amazon DynamoDB\" -l ]",
			Granularity: "MONTHLY",
			PrintFormat: "stdout",
			Metric:      []string{"UnblendedCost"},
		},
		{
			Alias:             "Costs grouped by GetCostAndUsage OPERATION",
			Dimension:         []string{"SERVICE", "OPERATION"},
			Tag:               "Name",
			Filter:            map[string]string{"OPERATION": "GetCostAndUsage"},
			FilterByTag:       false,
			FilterByDimension: true,
			ExcludeDiscounts:  true,
			Description: []string{"(Dimension=SERVICE",
				"Dimension=LINKED_ACCOUNT)"},
			CommandSyntax: "[ ccexplorer get aws -g DIMENSION=SERVICE," +
				"DIMENSION=OPERATION -f OPERATION=\"GetCostAndUsage\" -l ]",
			Granularity: "MONTHLY",
			PrintFormat: "stdout",
			Metric:      []string{"UnblendedCost"},
		},
	}
	return p
}
